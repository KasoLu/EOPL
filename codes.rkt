(define g-los '(a b c))
(define g-ex1 '((lambda (x) x) (x y)))
(define g-ex2 '(lambda (x) (x y)))
(define g-sts '((b c) (b () d)))
(define g-loi '(1 2 3))

(define (end-cont)
  (lambda (val)
    (begin (eopl:printf "End of computation.~%") val)))

(define (remove-first s los)
  (if (null? los)
    (list)
    (if (eqv? (car los) s)
      (cdr los)
      (cons (car los) (remove-first s (cdr los))))))
(define (remove-first/k s los cont)
  (if (null? los)
    (cont '()) 
    (if (eqv? (car los) s)
      (cont (cdr los))
      (remove-first/k s (cdr los)
        (lambda (vals) (cont (cons (car los) vals)))))))

(define (occurs-free? var expr)
  (cond [(symbol? expr) (eqv? var expr)]
        [(eqv? (car expr) 'lambda)
         (and (not (eqv? var (car (cadr expr))))
              (occurs-free? var (caddr expr)))]
        [else
         (or (occurs-free? var (car expr))
             (occurs-free? var (cadr expr)))]))
(define (occurs-free/k? var expr cont)
  (cond [(symbol? expr) (cont (eqv? var expr))]
        [(eqv? (car expr) 'lambda)
         (occurs-free/k? var (caddr expr)
           (lambda (val)
             (cont (and (not (eqv? var (car (cadr expr)))) val))))]
        [else
         (occurs-free/k? var (car expr)
           (lambda (val1)
             (occurs-free/k? var (cadr expr)
               (lambda (val2)
                 (cont (or val1 val2))))))]))

(define (subst new old slist)
  (if (null? slist)
    (list)
    (cons (subst-in-s-exp new old (car slist))
          (subst new old (cdr slist)))))
(define (subst-in-s-exp new old sexp)
  (if (symbol? sexp)
    (if (eqv? sexp old) new sexp)
    (subst new old sexp)))
(define (subst/k new old slist cont)
  (if (null? slist)
    (cont '())
    (subst-in-s-exp/k new old (car slist)
      (lambda (val1)
        (subst/k new old (cdr slist)
          (lambda (val2)
            (cont (cons val1 val2))))))))
(define (subst-in-s-exp/k new old sexp cont)
  (if (symbol? sexp)
    (cont (if (eqv? sexp old) new sexp))
    (subst/k new old sexp
      (lambda (val) (cont val)))))

(define (list-sum loi)
  (if (null? loi)
    0
    (+ (car loi)
       (list-sum (cdr loi)))))
(define (list-sum/k loi cont)
  (if (null? loi)
    (cont 0)
    (list-sum/k (cdr loi)
      (lambda (val)
        (cont (+ (car loi) val))))))
